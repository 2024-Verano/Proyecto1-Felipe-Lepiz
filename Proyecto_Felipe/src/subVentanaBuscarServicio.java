
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class subVentanaBuscarServicio extends javax.swing.JFrame {

    /**
     * Creates new form subVentanaBuscarServicio
     */
    public subVentanaBuscarServicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfCodigoCliente = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaInfo = new javax.swing.JTable();
        btnFacturar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnVolver1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(112, 145, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ingresa el codigo del cliente:");

        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buscar por nombre: ");

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Informacion:");

        tfCodigoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodigoClienteActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jtTablaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Marca", "Precio", "Estado", "Descripci√≥n", "Observaciones", "Fecha Recibido", "Fecha Entregado", "Nombre Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtTablaInfo);

        btnFacturar.setBackground(new java.awt.Color(153, 204, 255));
        btnFacturar.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnFacturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pay.png"))); // NOI18N
        btnFacturar.setText("Facturar");
        btnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 0, 0));
        btnEliminar.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnVolver1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        btnVolver1.setText("Volver");
        btnVolver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolver1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFacturar, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnVolver1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFacturar)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addComponent(btnVolver1)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            // Obtener el c√≥digo del cliente desde el JTextField
            int codigoCliente = Integer.parseInt(JOptionPane.showInputDialog(null, "Para confirmar, por favor ingrese el codigo del cliente a eliminar."));

            // Buscar el servicio correspondiente en la lista
            RegistroServicioMantenimiento servicioAEliminar = null;
            for (RegistroServicioMantenimiento servicio : RegistroServicioMantenimiento.servicios) {
                if (servicio.getCodigoCliente() == codigoCliente) {
                    servicioAEliminar = servicio;
                    break;
                }
            }

            if (servicioAEliminar != null) {
                // Confirmar antes de eliminar
                int confirmacion = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro de eliminar este servicio?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
                if (confirmacion == JOptionPane.YES_OPTION) {
                    // Eliminar el servicio de la lista
                    RegistroServicioMantenimiento.servicios.remove(servicioAEliminar);

                    // Limpiar la tabla
                    DefaultTableModel modeloTabla = (DefaultTableModel) jtTablaInfo.getModel();
                    int filaSeleccionada = jtTablaInfo.getSelectedRow();
                    if (filaSeleccionada == -1) {
                        JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla para eliminar un servicio.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    modeloTabla.removeRow(filaSeleccionada);

                    // Mostrar mensaje de √©xito
                    JOptionPane.showMessageDialog(this, "Servicio eliminado exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ un servicio con el c√≥digo de cliente ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un c√≥digo de cliente v√°lido.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarActionPerformed
        int codigoCliente = Integer.parseInt(JOptionPane.showInputDialog(null, "Para confirmar, por favor ingrese el codigo del servicio a facturar."));
        DefaultTableModel modeloTabla = (DefaultTableModel) jtTablaInfo.getModel();
        int filaSeleccionada = jtTablaInfo.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla para facturar un servicio.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try{
            String marca = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
            int precio = Integer.parseInt(modeloTabla.getValueAt(filaSeleccionada, 1).toString());
            String descripcion = modeloTabla.getValueAt(filaSeleccionada, 3).toString();
            String observaciones = modeloTabla.getValueAt(filaSeleccionada, 4).toString();
            LocalDate fechaRecibido = LocalDate.parse(modeloTabla.getValueAt(filaSeleccionada, 5).toString());
            LocalDate fechaEntrega = LocalDate.parse(modeloTabla.getValueAt(filaSeleccionada, 6).toString());

            //Buscar cliente asosiado al codigo
            Cliente cliente = Cliente.buscarClienteCodigo(codigoCliente);
            if(cliente == null){
                JOptionPane.showMessageDialog(this, "El codigo no esta asosiado a ningun cliente", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int impuesto = (int) (precio * 0.13); // 13% de impuesto
            int total = precio + impuesto;

            // Buscar el servicio relacionado con el cliente encontrado
            RegistroServicioMantenimiento servicioFacturar = null;
            for (RegistroServicioMantenimiento servicio : RegistroServicioMantenimiento.servicios) {
                if (servicio.getCodigoCliente() == codigoCliente) {
                    servicioFacturar = servicio;
                    break;
                }
            }

            if(servicioFacturar == null){
                JOptionPane.showMessageDialog(this, "No se encontr√≥ un servicio con el c√≥digo de cliente ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else if(servicioFacturar.getEstado().equalsIgnoreCase("Cerrado")){
                JOptionPane.showMessageDialog(this, "El cliente ya habia facturado o anulado este servicio", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Factura factura = new Factura(servicioFacturar.getCodigoServicio(), servicioFacturar.getCodigoCliente(), 1, fechaRecibido, precio, precio, impuesto, total);
            factura.agregarFactura(factura);
            servicioFacturar.setEstado("Cerrado");
            modeloTabla.setValueAt("Cerrado", filaSeleccionada, 2);
            cliente.facturar();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("Factura.txt", true))) {
                writer.write("=== Encabezado de la Factura ===");
                writer.newLine();
                writer.write(factura.datosFactura());
                writer.newLine();
                writer.write("=== Detalles de la Factura ===");
                writer.newLine();
                writer.write(factura.detallesFactura());
                writer.newLine();
                writer.write("-------------------------------");
                writer.newLine();
                // Agregar los datos adicionales
                writer.write("=== Informaci√≥n Adicional ===");
                writer.newLine();
                writer.write("Marca: " + marca);
                writer.newLine();
                writer.write("Descripci√≥n: " + descripcion);
                writer.newLine();
                writer.write("Observaciones: " + observaciones);
                writer.newLine();
                writer.write("Fecha de Entrega: " + fechaEntrega);
                writer.newLine();
                writer.write("-------------------------------");
                writer.newLine();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            JOptionPane.showMessageDialog(null, "Se ha facturado el servicio. Total a pagar: " + total, "√âxito", JOptionPane.INFORMATION_MESSAGE);

            int confirmar = JOptionPane.showConfirmDialog(null, "Desea factura electronica?");
            if(confirmar == JOptionPane.YES_OPTION){
                String correo = cliente.getCorreo();
                String mensajeFactura = "=== Encabezado de la Factura ===\n" +
                factura.datosFactura() + "\n" +
                "=== Detalles de la Factura ===\n" +
                factura.detallesFactura() + "\n" +
                "-------------------------------\n" +
                "=== Informaci√≥n Adicional ===\n" +
                "Marca: " + marca + "\n" +
                "Descripci√≥n: " + descripcion + "\n" +
                "Observaciones: " + observaciones + "\n" +
                "Fecha de Entrega: " + fechaEntrega + "\n" +
                "-------------------------------";
                facturaElectronica(correo, mensajeFactura);
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al obtener los datos de la tabla. Verifique los valores ingresados.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnFacturarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        String nombreCliente = txtNombre.getText().trim();
        String codigoClienteStr = tfCodigoCliente.getText().trim();
        Cliente cliente = null;
        int codigo = -1;

        // Validar que al menos un campo tenga datos
        if (codigoClienteStr.isEmpty() && nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar al menos un campo para realizar la b√∫squeda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Buscar por c√≥digo si se ingres√≥
            if (!codigoClienteStr.isEmpty()) {
                codigo = Integer.parseInt(codigoClienteStr);
                cliente = Cliente.buscarClienteCodigo(codigo);
                if (cliente == null) {
                    JOptionPane.showMessageDialog(this, "No se encontr√≥ ning√∫n cliente con el c√≥digo ingresado.", "Sin resultados", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            // Buscar por nombre si se ingres√≥ y no se encontr√≥ por c√≥digo
            if (cliente == null && !nombreCliente.isEmpty()) {
                cliente = Cliente.buscarClienteNombre(nombreCliente);
                if (cliente == null) {
                    JOptionPane.showMessageDialog(this, "No se encontr√≥ ning√∫n cliente con el nombre ingresado.", "Sin resultados", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            // Buscar el servicio relacionado con el cliente encontrado
            RegistroServicioMantenimiento servicioModificado = null;
            for (RegistroServicioMantenimiento servicio : RegistroServicioMantenimiento.servicios) {
                if (servicio.getCodigoCliente() == cliente.getCodigo()) {
                    servicioModificado = servicio;
                    break;
                }
            }

            if (servicioModificado != null) {
                // Obtener el modelo de la tabla
                DefaultTableModel modeloTabla = (DefaultTableModel) jtTablaInfo.getModel();
                int filaSeleccionada = jtTablaInfo.getSelectedRow();
                if (filaSeleccionada == -1) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla para modificar un servicio.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Validar datos de la tabla
                try {
                    String marca = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
                    int precio = Integer.parseInt(modeloTabla.getValueAt(filaSeleccionada, 1).toString());
                    String estado = modeloTabla.getValueAt(filaSeleccionada, 2).toString();
                    String descripcion = modeloTabla.getValueAt(filaSeleccionada, 3).toString();
                    String observaciones = modeloTabla.getValueAt(filaSeleccionada, 4).toString();
                    LocalDate fechaRecibido = LocalDate.parse(modeloTabla.getValueAt(filaSeleccionada, 5).toString());
                    LocalDate fechaEntrega = LocalDate.parse(modeloTabla.getValueAt(filaSeleccionada, 6).toString());

                    // Modificar el servicio
                    servicioModificado.modificarServicio(servicioModificado.getCodigoServicio(), cliente.getCodigo(), marca, descripcion, precio,
                        fechaRecibido,
                        fechaEntrega,
                        observaciones,
                        estado
                    );

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error al obtener los datos de la tabla. Verifique los valores ingresados.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ un servicio con el c√≥digo de cliente ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un c√≥digo de cliente v√°lido.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String nombreCliente = txtNombre.getText().trim();
        String codigoClienteStr = tfCodigoCliente.getText();
        Cliente cliente = null;
        List<Cliente> clientesEncontrados = new ArrayList<>();
        int codigo = -1; // Valor por defecto si no se ingresa c√≥digo

        // Validar que al menos un campo tenga datos
        if (codigoClienteStr.isEmpty() && nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar al menos un campo para realizar la b√∫squeda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Buscar por c√≥digo si se ingres√≥
            if (!codigoClienteStr.isEmpty()) {
                codigo = Integer.parseInt(codigoClienteStr);
                cliente = Cliente.buscarClienteCodigo(codigo);
                if (cliente != null) {
                    clientesEncontrados.add(cliente);
                    for(Cliente client : Cliente.getClientes()){
                        if(client.getCodigo() == codigo && (!clientesEncontrados.contains(client))){
                            clientesEncontrados.add(client);
                        }
                    }
                }
            }

            // Buscar por nombre si se ingres√≥
            if (!nombreCliente.isEmpty()) {
                Cliente clientesPorNombre = Cliente.buscarClienteNombre(nombreCliente);
                if (clientesPorNombre != null) {
                    clientesEncontrados.add(clientesPorNombre);
                    for(Cliente client : Cliente.getClientes()){
                        if(client.getNombre().equalsIgnoreCase(nombreCliente) && (!clientesEncontrados.contains(client))){
                            clientesEncontrados.add(client);
                        }
                    }
                }
            }

            // Validar si no se encontr√≥ ning√∫n cliente
            if (clientesEncontrados.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ ning√∫n cliente con los datos ingresados.", "Sin resultados", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Limpiar la tabla antes de cargar nuevos datos
            DefaultTableModel modeloTabla = (DefaultTableModel) jtTablaInfo.getModel();
            modeloTabla.setRowCount(0); // Eliminar filas existentes

            // Recorrer todos los clientes encontrados y mostrar servicios asociados
            for (Cliente c : clientesEncontrados) {
                for (RegistroServicioMantenimiento servicio : RegistroServicioMantenimiento.servicios) {
                    if (servicio.getCodigoCliente() == c.getCodigo()) {
                        modeloTabla.addRow(new Object[]{
                            servicio.getMarcaBicicleta(),
                            servicio.getPrecio(),
                            servicio.getEstado(),
                            servicio.getDescripcionBicicleta(),
                            servicio.getObservaciones(),
                            servicio.getFechaRecibido(),
                            servicio.getFechaEntrega(),
                            c.getNombre()
                        });
                    }
                }
            }

        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "Ingrese un c√≥digo de cliente v√°lido.", "Error de Entrada", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tfCodigoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodigoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCodigoClienteActionPerformed

    private void btnVolver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolver1ActionPerformed
        this.setVisible(false);
        VentanaTienda ventanaTienda = new VentanaTienda();
        ventanaTienda.setVisible(true);
    }//GEN-LAST:event_btnVolver1ActionPerformed

    private void facturaElectronica(String correo, String mensaje) {
        // Configuraci√≥n del correo
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");

        final String remitente = "tiendatec178@gmail.com"; // correo del remitente
        final String contraAPP = "yexyujhzdxldyqes";       // Contrase√±a de aplicaci√≥n

        try {
            // Crear la sesi√≥n
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(remitente, contraAPP);
                }
            });

            // Crear el mensaje
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(remitente));
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(correo));
            message.setSubject("Factura Electr√≥nica");

            // Crear el cuerpo del mensaje
            MimeBodyPart textPart = new MimeBodyPart();
            textPart.setText(mensaje);

            // Crear una estructura multipart para el correo
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(textPart);

            // Asignar el contenido al mensaje
            message.setContent(multipart);

            // Enviar el mensaje
            Transport.send(message);

            JOptionPane.showMessageDialog(null, "La factura se envi√≥ correctamente al correo: " + correo, "√âxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al enviar la factura: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(subVentanaBuscarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(subVentanaBuscarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(subVentanaBuscarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(subVentanaBuscarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new subVentanaBuscarServicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFacturar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnVolver1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtTablaInfo;
    private javax.swing.JTextField tfCodigoCliente;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
