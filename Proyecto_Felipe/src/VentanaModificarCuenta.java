
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VentanaModificarCuenta extends javax.swing.JFrame {
    

    /**
     * Creates new form VentanaModificarCuenta
     */
    public VentanaModificarCuenta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnVolver = new javax.swing.JButton();
        btnModificarCliente = new javax.swing.JButton();
        txtCodigo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        txtApellidos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(112, 145, 255));

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnModificarCliente.setText("Modificar");
        btnModificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarClienteActionPerformed(evt);
            }
        });

        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar por codigo:");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellidos", "Telefono", "Correo", "Provinica", "Canton", "Distrito", "Fecha de Nacimiento"
            }
        ));
        jScrollPane1.setViewportView(tblCliente);

        btnEliminar.setBackground(new java.awt.Color(255, 51, 51));
        btnEliminar.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Buscar por apellidos: ");

        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buscar por nombre: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnModificarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(34, 34, 34)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(51, 51, 51)
                                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnModificarCliente)))
                .addGap(82, 82, 82)
                .addComponent(btnVolver)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.setVisible(false);
        VentanaTienda ventanaTienda = new VentanaTienda();
        ventanaTienda.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed
    
    private void btnModificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarClienteActionPerformed
        String codigoCliente = txtCodigo.getText().trim();
        String nombreCliente = txtNombre.getText().trim();
        String apellidosCliente = txtApellidos.getText().trim();
        Cliente cliente = null;

        // Validar que al menos un campo tenga datos
        if (codigoCliente.isEmpty() && nombreCliente.isEmpty() && apellidosCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar al menos un campo para realizar la búsqueda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Buscar por código si se ingresó
            if (!codigoCliente.isEmpty()) {
                int codigo = Integer.parseInt(codigoCliente);
                cliente = Cliente.buscarClienteCodigo(codigo);
                if (cliente == null) {
                    JOptionPane.showMessageDialog(null, "No se encontro un cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Buscar por nombre si se ingresó
            if (!nombreCliente.isEmpty()) {
                cliente = Cliente.buscarClienteNombre(nombreCliente);
                if (cliente == null) {
                    JOptionPane.showMessageDialog(null, "No se encontro un cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Buscar por apellidos si se ingresó
            if (!apellidosCliente.isEmpty()) {
                cliente = Cliente.buscarClienteApellidos(apellidosCliente);
                if (cliente == null) {
                    JOptionPane.showMessageDialog(null, "No se encontro un cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Validar que haya una fila seleccionada y modificar el cliente
            int filaSeleccionada = tblCliente.getSelectedRow();
            if (filaSeleccionada < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Obtener los datos de la tabla
            String nombre = (String) tblCliente.getValueAt(filaSeleccionada, 0);
            String apellidos = (String) tblCliente.getValueAt(filaSeleccionada, 1);
            String telefonoStr = tblCliente.getValueAt(filaSeleccionada, 2).toString().strip();
            String correo = (String) tblCliente.getValueAt(filaSeleccionada, 3);
            String provincia = (String) tblCliente.getValueAt(filaSeleccionada, 4);
            String canton = (String) tblCliente.getValueAt(filaSeleccionada, 5);
            String distrito = (String) tblCliente.getValueAt(filaSeleccionada, 6);
            String fechaNacimientoStr = tblCliente.getValueAt(filaSeleccionada, 7).toString().strip();

            // Validar y convertir datos
            LocalDate fechaNacimiento;
            try {
                fechaNacimiento = LocalDate.parse(fechaNacimientoStr, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                if (LocalDate.now().getYear() - fechaNacimiento.getYear() > 90) {
                    JOptionPane.showMessageDialog(null, "La fecha de nacimiento no puede indicar más de 90 años.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null, "Fecha inválida. Use el formato yyyy-MM-dd.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int telefono;
            try {
                if (!telefonoStr.matches("^[2468]\\d{7}$")) {
                    JOptionPane.showMessageDialog(null, "El número de teléfono debe comenzar con 2, 4, 6 u 8 y tener 8 dígitos.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                telefono = Integer.parseInt(telefonoStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número de teléfono válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Modificar el cliente
            Cliente.modificarCliente(cliente.getCodigo(), nombre, apellidos, correo, telefono, provincia, canton, distrito, fechaNacimiento);

            JOptionPane.showMessageDialog(null, "Cliente modificado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el código: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al procesar los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnModificarClienteActionPerformed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String codigoCliente = txtCodigo.getText().trim();
        String apellidosCliente = txtApellidos.getText().trim();
        String nombreCliente = txtNombre.getText().trim();
        List<Cliente> clientesEncontrados = new ArrayList<>();

        // Validar que al menos un campo tenga datos
        if (codigoCliente.isEmpty() && apellidosCliente.isEmpty() && nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar al menos un campo para realizar la búsqueda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Buscar por código si se ingresó
            if (!codigoCliente.isEmpty()) {
                int codigo = Integer.parseInt(codigoCliente);
                Cliente cliente = Cliente.buscarClienteCodigo(codigo);
                if (cliente != null) {
                    clientesEncontrados.add(cliente);
                    for(Cliente client : Cliente.getClientes()){
                        if(client.getCodigo() == codigo && (!clientesEncontrados.contains(client))){
                            clientesEncontrados.add(client);
                        }
                    }
                }
            }

            // Buscar por apellidos si se ingresó
            if (!apellidosCliente.isEmpty()) {
                Cliente cliente = Cliente.buscarClienteApellidos(apellidosCliente);
                if(cliente != null){
                    clientesEncontrados.add(cliente);
                    for(Cliente client : Cliente.getClientes()){
                        if(client.getApellidos().equalsIgnoreCase(apellidosCliente) && (!clientesEncontrados.contains(client))){
                            clientesEncontrados.add(client);
                        }
                    }
                }
            }

            // Buscar por nombre si se ingresó
            if (!nombreCliente.isEmpty()) {
                Cliente cliente = Cliente.buscarClienteNombre(nombreCliente);
                if(cliente != null){
                    clientesEncontrados.add(cliente);
                    for(Cliente client : Cliente.getClientes()){
                        if(client.getNombre().equalsIgnoreCase(nombreCliente) && (!clientesEncontrados.contains(client))){
                            clientesEncontrados.add(client);
                        }
                    }
                }
            }

            // Verificar si se encontraron clientes
            if (clientesEncontrados.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontró ningún cliente con los datos ingresados.", "Sin resultados", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Mostrar los clientes encontrados en la tabla
            DefaultTableModel modeloTabla = (DefaultTableModel) tblCliente.getModel();
            modeloTabla.setRowCount(0); // Limpiar la tabla
            for (Cliente cliente : clientesEncontrados) {
                modeloTabla.addRow(new Object[]{
                    cliente.getNombre(),
                    cliente.getApellidos(),
                    cliente.getTelefono(),
                    cliente.getCorreo(),
                    cliente.getProvincia(),
                    cliente.getCanton(),
                    cliente.getDistrito(),
                    cliente.getFechaNacimiento()
                });
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El código debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este cliente?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            int filaSeleccionada = tblCliente.getSelectedRow();

            if (filaSeleccionada != -1) {
                String correo = (String) tblCliente.getValueAt(filaSeleccionada, 3);
                String codigoCliente = JOptionPane.showInputDialog(null, "Para confirmar, ingrese el código del cliente que desea eliminar");
                
                if (codigoCliente == null){
                    return;
                }
                else if (codigoCliente.strip().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "El código del cliente no puede estar vacío.", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                int codigo;
                try {
                    codigo = Integer.parseInt(codigoCliente.strip());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "El código del cliente debe ser un número válido.", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                Cliente clienteEliminar = Cliente.buscarClienteCodigo(codigo);
                if (clienteEliminar == null || !clienteEliminar.getCorreo().equals(correo)) {
                    JOptionPane.showMessageDialog(null, "El código no coincide con el cliente seleccionado o el cliente no existe.", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                boolean eliminado = clienteEliminar.eliminarCliente(codigo);
                if(!eliminado){
                    return;
                }
                
                DefaultTableModel modeloTabla = (DefaultTableModel) tblCliente.getModel();
                modeloTabla.removeRow(filaSeleccionada);
                JOptionPane.showMessageDialog(null, "Cliente eliminado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un cliente para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se eliminó ningún cliente", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaModificarCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaModificarCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaModificarCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaModificarCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */        
                
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaModificarCuenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificarCliente;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
